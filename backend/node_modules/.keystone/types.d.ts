type Scalars = {
  readonly ID: string;
  readonly Boolean: boolean;
  readonly String: string;
  readonly Int: number;
  readonly Float: number;
  readonly JSON: import("@keystone-6/core/types").JSONValue;
  readonly Decimal: import("@keystone-6/core/types").Decimal | string;
};

export type UserWhereUniqueInput = {
  readonly id?: Scalars["ID"] | null;
  readonly userName?: Scalars["String"] | null;
  readonly email?: Scalars["String"] | null;
};

export type UserWhereInput = {
  readonly AND?: ReadonlyArray<UserWhereInput> | UserWhereInput | null;
  readonly OR?: ReadonlyArray<UserWhereInput> | UserWhereInput | null;
  readonly NOT?: ReadonlyArray<UserWhereInput> | UserWhereInput | null;
  readonly id?: IDFilter | null;
  readonly userName?: StringFilter | null;
  readonly email?: StringFilter | null;
  readonly userType?: StringFilter | null;
  readonly photo?: UserImageWhereInput | null;
  readonly password?: PasswordFilter | null;
  readonly passwordResetToken?: PasswordFilter | null;
  readonly passwordResetIssuedAt?: DateTimeNullableFilter | null;
  readonly passwordResetRedeemedAt?: DateTimeNullableFilter | null;
};

export type IDFilter = {
  readonly equals?: Scalars["ID"] | null;
  readonly in?: ReadonlyArray<Scalars["ID"]> | Scalars["ID"] | null;
  readonly notIn?: ReadonlyArray<Scalars["ID"]> | Scalars["ID"] | null;
  readonly lt?: Scalars["ID"] | null;
  readonly lte?: Scalars["ID"] | null;
  readonly gt?: Scalars["ID"] | null;
  readonly gte?: Scalars["ID"] | null;
  readonly not?: IDFilter | null;
};

export type StringFilter = {
  readonly equals?: Scalars["String"] | null;
  readonly in?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly notIn?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly lt?: Scalars["String"] | null;
  readonly lte?: Scalars["String"] | null;
  readonly gt?: Scalars["String"] | null;
  readonly gte?: Scalars["String"] | null;
  readonly contains?: Scalars["String"] | null;
  readonly startsWith?: Scalars["String"] | null;
  readonly endsWith?: Scalars["String"] | null;
  readonly not?: NestedStringFilter | null;
};

export type NestedStringFilter = {
  readonly equals?: Scalars["String"] | null;
  readonly in?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly notIn?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly lt?: Scalars["String"] | null;
  readonly lte?: Scalars["String"] | null;
  readonly gt?: Scalars["String"] | null;
  readonly gte?: Scalars["String"] | null;
  readonly contains?: Scalars["String"] | null;
  readonly startsWith?: Scalars["String"] | null;
  readonly endsWith?: Scalars["String"] | null;
  readonly not?: NestedStringFilter | null;
};

export type PasswordFilter = {
  readonly isSet: Scalars["Boolean"];
};

export type DateTimeNullableFilter = {
  readonly equals?: any | null;
  readonly in?: ReadonlyArray<any> | any | null;
  readonly notIn?: ReadonlyArray<any> | any | null;
  readonly lt?: any | null;
  readonly lte?: any | null;
  readonly gt?: any | null;
  readonly gte?: any | null;
  readonly not?: DateTimeNullableFilter | null;
};

export type UserOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly userName?: OrderDirection | null;
  readonly email?: OrderDirection | null;
  readonly userType?: OrderDirection | null;
  readonly passwordResetIssuedAt?: OrderDirection | null;
  readonly passwordResetRedeemedAt?: OrderDirection | null;
};

export type OrderDirection =
  | "asc"
  | "desc";

export type UserUpdateInput = {
  readonly userName?: Scalars["String"] | null;
  readonly email?: Scalars["String"] | null;
  readonly userType?: Scalars["String"] | null;
  readonly photo?: UserImageRelateToOneForUpdateInput | null;
  readonly password?: Scalars["String"] | null;
  readonly passwordResetToken?: Scalars["String"] | null;
  readonly passwordResetIssuedAt?: any | null;
  readonly passwordResetRedeemedAt?: any | null;
};

export type UserImageRelateToOneForUpdateInput = {
  readonly create?: UserImageCreateInput | null;
  readonly connect?: UserImageWhereUniqueInput | null;
  readonly disconnect?: Scalars["Boolean"] | null;
};

export type UserUpdateArgs = {
  readonly where: UserWhereUniqueInput;
  readonly data: UserUpdateInput;
};

export type UserCreateInput = {
  readonly userName?: Scalars["String"] | null;
  readonly email?: Scalars["String"] | null;
  readonly userType?: Scalars["String"] | null;
  readonly photo?: UserImageRelateToOneForCreateInput | null;
  readonly password?: Scalars["String"] | null;
  readonly passwordResetToken?: Scalars["String"] | null;
  readonly passwordResetIssuedAt?: any | null;
  readonly passwordResetRedeemedAt?: any | null;
};

export type UserImageRelateToOneForCreateInput = {
  readonly create?: UserImageCreateInput | null;
  readonly connect?: UserImageWhereUniqueInput | null;
};

export type CloudinaryImageFormat = {
  readonly prettyName?: Scalars["String"] | null;
  readonly width?: Scalars["String"] | null;
  readonly height?: Scalars["String"] | null;
  readonly crop?: Scalars["String"] | null;
  readonly aspect_ratio?: Scalars["String"] | null;
  readonly gravity?: Scalars["String"] | null;
  readonly zoom?: Scalars["String"] | null;
  readonly x?: Scalars["String"] | null;
  readonly y?: Scalars["String"] | null;
  readonly format?: Scalars["String"] | null;
  readonly fetch_format?: Scalars["String"] | null;
  readonly quality?: Scalars["String"] | null;
  readonly radius?: Scalars["String"] | null;
  readonly angle?: Scalars["String"] | null;
  readonly effect?: Scalars["String"] | null;
  readonly opacity?: Scalars["String"] | null;
  readonly border?: Scalars["String"] | null;
  readonly background?: Scalars["String"] | null;
  readonly overlay?: Scalars["String"] | null;
  readonly underlay?: Scalars["String"] | null;
  readonly default_image?: Scalars["String"] | null;
  readonly delay?: Scalars["String"] | null;
  readonly color?: Scalars["String"] | null;
  readonly color_space?: Scalars["String"] | null;
  readonly dpr?: Scalars["String"] | null;
  readonly page?: Scalars["String"] | null;
  readonly density?: Scalars["String"] | null;
  readonly flags?: Scalars["String"] | null;
  readonly transformation?: Scalars["String"] | null;
};

export type UserImageWhereUniqueInput = {
  readonly id?: Scalars["ID"] | null;
};

export type UserImageWhereInput = {
  readonly AND?: ReadonlyArray<UserImageWhereInput> | UserImageWhereInput | null;
  readonly OR?: ReadonlyArray<UserImageWhereInput> | UserImageWhereInput | null;
  readonly NOT?: ReadonlyArray<UserImageWhereInput> | UserImageWhereInput | null;
  readonly id?: IDFilter | null;
  readonly altText?: StringFilter | null;
  readonly user?: UserWhereInput | null;
};

export type UserImageOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly altText?: OrderDirection | null;
};

export type UserImageUpdateInput = {
  readonly image?: any | null;
  readonly altText?: Scalars["String"] | null;
  readonly user?: UserRelateToOneForUpdateInput | null;
};

export type UserRelateToOneForUpdateInput = {
  readonly create?: UserCreateInput | null;
  readonly connect?: UserWhereUniqueInput | null;
  readonly disconnect?: Scalars["Boolean"] | null;
};

export type UserImageUpdateArgs = {
  readonly where: UserImageWhereUniqueInput;
  readonly data: UserImageUpdateInput;
};

export type UserImageCreateInput = {
  readonly image?: any | null;
  readonly altText?: Scalars["String"] | null;
  readonly user?: UserRelateToOneForCreateInput | null;
};

export type UserRelateToOneForCreateInput = {
  readonly create?: UserCreateInput | null;
  readonly connect?: UserWhereUniqueInput | null;
};

export type LessonWhereUniqueInput = {
  readonly id?: Scalars["ID"] | null;
};

export type LessonWhereInput = {
  readonly AND?: ReadonlyArray<LessonWhereInput> | LessonWhereInput | null;
  readonly OR?: ReadonlyArray<LessonWhereInput> | LessonWhereInput | null;
  readonly NOT?: ReadonlyArray<LessonWhereInput> | LessonWhereInput | null;
  readonly id?: IDFilter | null;
  readonly subject?: StringFilter | null;
  readonly level?: StringNullableFilter | null;
  readonly description?: StringFilter | null;
  readonly price?: IntNullableFilter | null;
  readonly status?: StringNullableFilter | null;
};

export type StringNullableFilter = {
  readonly equals?: Scalars["String"] | null;
  readonly in?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly notIn?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly lt?: Scalars["String"] | null;
  readonly lte?: Scalars["String"] | null;
  readonly gt?: Scalars["String"] | null;
  readonly gte?: Scalars["String"] | null;
  readonly contains?: Scalars["String"] | null;
  readonly startsWith?: Scalars["String"] | null;
  readonly endsWith?: Scalars["String"] | null;
  readonly not?: NestedStringNullableFilter | null;
};

export type NestedStringNullableFilter = {
  readonly equals?: Scalars["String"] | null;
  readonly in?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly notIn?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly lt?: Scalars["String"] | null;
  readonly lte?: Scalars["String"] | null;
  readonly gt?: Scalars["String"] | null;
  readonly gte?: Scalars["String"] | null;
  readonly contains?: Scalars["String"] | null;
  readonly startsWith?: Scalars["String"] | null;
  readonly endsWith?: Scalars["String"] | null;
  readonly not?: NestedStringNullableFilter | null;
};

export type IntNullableFilter = {
  readonly equals?: Scalars["Int"] | null;
  readonly in?: ReadonlyArray<Scalars["Int"]> | Scalars["Int"] | null;
  readonly notIn?: ReadonlyArray<Scalars["Int"]> | Scalars["Int"] | null;
  readonly lt?: Scalars["Int"] | null;
  readonly lte?: Scalars["Int"] | null;
  readonly gt?: Scalars["Int"] | null;
  readonly gte?: Scalars["Int"] | null;
  readonly not?: IntNullableFilter | null;
};

export type LessonOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly subject?: OrderDirection | null;
  readonly level?: OrderDirection | null;
  readonly description?: OrderDirection | null;
  readonly price?: OrderDirection | null;
  readonly status?: OrderDirection | null;
};

export type LessonUpdateInput = {
  readonly subject?: Scalars["String"] | null;
  readonly level?: Scalars["String"] | null;
  readonly description?: Scalars["String"] | null;
  readonly price?: Scalars["Int"] | null;
  readonly status?: Scalars["String"] | null;
};

export type LessonUpdateArgs = {
  readonly where: LessonWhereUniqueInput;
  readonly data: LessonUpdateInput;
};

export type LessonCreateInput = {
  readonly subject?: Scalars["String"] | null;
  readonly level?: Scalars["String"] | null;
  readonly description?: Scalars["String"] | null;
  readonly price?: Scalars["Int"] | null;
  readonly status?: Scalars["String"] | null;
};

export type ProductWhereUniqueInput = {
  readonly id?: Scalars["ID"] | null;
};

export type ProductWhereInput = {
  readonly AND?: ReadonlyArray<ProductWhereInput> | ProductWhereInput | null;
  readonly OR?: ReadonlyArray<ProductWhereInput> | ProductWhereInput | null;
  readonly NOT?: ReadonlyArray<ProductWhereInput> | ProductWhereInput | null;
  readonly id?: IDFilter | null;
  readonly name?: StringFilter | null;
  readonly description?: StringFilter | null;
  readonly photo?: ProductImageWhereInput | null;
  readonly status?: StringNullableFilter | null;
  readonly price?: IntNullableFilter | null;
};

export type ProductOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly name?: OrderDirection | null;
  readonly description?: OrderDirection | null;
  readonly status?: OrderDirection | null;
  readonly price?: OrderDirection | null;
};

export type ProductUpdateInput = {
  readonly name?: Scalars["String"] | null;
  readonly description?: Scalars["String"] | null;
  readonly photo?: ProductImageRelateToOneForUpdateInput | null;
  readonly status?: Scalars["String"] | null;
  readonly price?: Scalars["Int"] | null;
};

export type ProductImageRelateToOneForUpdateInput = {
  readonly create?: ProductImageCreateInput | null;
  readonly connect?: ProductImageWhereUniqueInput | null;
  readonly disconnect?: Scalars["Boolean"] | null;
};

export type ProductUpdateArgs = {
  readonly where: ProductWhereUniqueInput;
  readonly data: ProductUpdateInput;
};

export type ProductCreateInput = {
  readonly name?: Scalars["String"] | null;
  readonly description?: Scalars["String"] | null;
  readonly photo?: ProductImageRelateToOneForCreateInput | null;
  readonly status?: Scalars["String"] | null;
  readonly price?: Scalars["Int"] | null;
};

export type ProductImageRelateToOneForCreateInput = {
  readonly create?: ProductImageCreateInput | null;
  readonly connect?: ProductImageWhereUniqueInput | null;
};

export type ProductImageWhereUniqueInput = {
  readonly id?: Scalars["ID"] | null;
};

export type ProductImageWhereInput = {
  readonly AND?: ReadonlyArray<ProductImageWhereInput> | ProductImageWhereInput | null;
  readonly OR?: ReadonlyArray<ProductImageWhereInput> | ProductImageWhereInput | null;
  readonly NOT?: ReadonlyArray<ProductImageWhereInput> | ProductImageWhereInput | null;
  readonly id?: IDFilter | null;
  readonly altText?: StringFilter | null;
  readonly product?: ProductWhereInput | null;
};

export type ProductImageOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly altText?: OrderDirection | null;
};

export type ProductImageUpdateInput = {
  readonly image?: any | null;
  readonly altText?: Scalars["String"] | null;
  readonly product?: ProductRelateToOneForUpdateInput | null;
};

export type ProductRelateToOneForUpdateInput = {
  readonly create?: ProductCreateInput | null;
  readonly connect?: ProductWhereUniqueInput | null;
  readonly disconnect?: Scalars["Boolean"] | null;
};

export type ProductImageUpdateArgs = {
  readonly where: ProductImageWhereUniqueInput;
  readonly data: ProductImageUpdateInput;
};

export type ProductImageCreateInput = {
  readonly image?: any | null;
  readonly altText?: Scalars["String"] | null;
  readonly product?: ProductRelateToOneForCreateInput | null;
};

export type ProductRelateToOneForCreateInput = {
  readonly create?: ProductCreateInput | null;
  readonly connect?: ProductWhereUniqueInput | null;
};

export type CreateInitialUserInput = {
  readonly userName?: Scalars["String"] | null;
  readonly email?: Scalars["String"] | null;
  readonly userType?: Scalars["String"] | null;
  readonly password?: Scalars["String"] | null;
};

export type PasswordResetRedemptionErrorCode =
  | "FAILURE"
  | "TOKEN_EXPIRED"
  | "TOKEN_REDEEMED";

export type KeystoneAdminUIFieldMetaCreateViewFieldMode =
  | "edit"
  | "hidden";

export type KeystoneAdminUIFieldMetaListViewFieldMode =
  | "read"
  | "hidden";

export type KeystoneAdminUIFieldMetaItemViewFieldMode =
  | "edit"
  | "read"
  | "hidden";

export type QueryMode =
  | "default"
  | "insensitive";

export type KeystoneAdminUISortDirection =
  | "ASC"
  | "DESC";


export declare namespace Lists {
  export type User = import('@keystone-6/core').ListConfig<Lists.User.TypeInfo, any>;
  namespace User {
    export type Item = import('.prisma/client').User;
    export type TypeInfo = {
      key: "User";
      fields: "id" | "userName" | "email" | "userType" | "photo" | "password" | "passwordResetToken" | "passwordResetIssuedAt" | "passwordResetRedeemedAt"
      item: Item;
      inputs: {
        where: UserWhereInput;
        uniqueWhere: UserWhereUniqueInput;
        create: UserCreateInput;
        update: UserUpdateInput;
        orderBy: UserOrderByInput;
      };
      all: __TypeInfo;
    };
  }
  export type UserImage = import('@keystone-6/core').ListConfig<Lists.UserImage.TypeInfo, any>;
  namespace UserImage {
    export type Item = import('.prisma/client').UserImage;
    export type TypeInfo = {
      key: "UserImage";
      fields: "id" | "image" | "altText" | "user"
      item: Item;
      inputs: {
        where: UserImageWhereInput;
        uniqueWhere: UserImageWhereUniqueInput;
        create: UserImageCreateInput;
        update: UserImageUpdateInput;
        orderBy: UserImageOrderByInput;
      };
      all: __TypeInfo;
    };
  }
  export type Lesson = import('@keystone-6/core').ListConfig<Lists.Lesson.TypeInfo, any>;
  namespace Lesson {
    export type Item = import('.prisma/client').Lesson;
    export type TypeInfo = {
      key: "Lesson";
      fields: "id" | "subject" | "level" | "description" | "price" | "status"
      item: Item;
      inputs: {
        where: LessonWhereInput;
        uniqueWhere: LessonWhereUniqueInput;
        create: LessonCreateInput;
        update: LessonUpdateInput;
        orderBy: LessonOrderByInput;
      };
      all: __TypeInfo;
    };
  }
  export type Product = import('@keystone-6/core').ListConfig<Lists.Product.TypeInfo, any>;
  namespace Product {
    export type Item = import('.prisma/client').Product;
    export type TypeInfo = {
      key: "Product";
      fields: "id" | "name" | "description" | "photo" | "status" | "price"
      item: Item;
      inputs: {
        where: ProductWhereInput;
        uniqueWhere: ProductWhereUniqueInput;
        create: ProductCreateInput;
        update: ProductUpdateInput;
        orderBy: ProductOrderByInput;
      };
      all: __TypeInfo;
    };
  }
  export type ProductImage = import('@keystone-6/core').ListConfig<Lists.ProductImage.TypeInfo, any>;
  namespace ProductImage {
    export type Item = import('.prisma/client').ProductImage;
    export type TypeInfo = {
      key: "ProductImage";
      fields: "id" | "image" | "altText" | "product"
      item: Item;
      inputs: {
        where: ProductImageWhereInput;
        uniqueWhere: ProductImageWhereUniqueInput;
        create: ProductImageCreateInput;
        update: ProductImageUpdateInput;
        orderBy: ProductImageOrderByInput;
      };
      all: __TypeInfo;
    };
  }
}
export type Context = import('@keystone-6/core/types').KeystoneContext<TypeInfo>;

export type TypeInfo = {
  lists: {
  readonly User: Lists.User.TypeInfo;
  readonly UserImage: Lists.UserImage.TypeInfo;
  readonly Lesson: Lists.Lesson.TypeInfo;
  readonly Product: Lists.Product.TypeInfo;
  readonly ProductImage: Lists.ProductImage.TypeInfo;
  };
  prisma: import('.prisma/client').PrismaClient;
};

type __TypeInfo = TypeInfo;

export type Lists = {
  [Key in keyof TypeInfo['lists']]?: import('@keystone-6/core').ListConfig<TypeInfo['lists'][Key], any>
} & Record<string, import('@keystone-6/core').ListConfig<any, any>>;
